  const functions = require('firebase-functions');
  var admin = require('firebase-admin');
  admin.initializeApp(functions.config().firebase);

  var firestore = admin.firestore();

  // // Create and Deploy Your First Cloud Functions
  // // https://firebase.google.com/docs/functions/write-firebase-functions
  //Funcion por default
  exports.helloWorld = functions.https.onRequest((request, response) => {
    response.send("Hello from Firebase!");
  });

  //Para confirmar registro
  exports.confirm = functions.https.onRequest((request, response) => {
    let params = request.body.result.parameters;
    response.send({
      speech:
      `${params.name} tu registro para un equipo de ${params.hacker} con ${params.number} personas, que ${params.time} han ido a un hack se ha realizado con exito,
      te enviare tus boletos al correo ${params.email} de inmediato.
      `
    });
  });

  //Para registrar en bd
  exports.register = functions.https.onRequest((request, response) => {
    let params = request.body.result.parameters;
    firestore.collection('tickets').add(params)
    .then(() => {
      response.send({
        speech:
        `${params.name} tu registro para un equipo de ${params.hacker} con ${params.number} personas, que ${params.time} han ido a un hack se ha realizado con exito,
        te enviare tus boletos al correo ${params.email} de inmediato.
        `
      });
    })
    .catch((e => {
      console.log("error: ", e);
      response.send({
        speech: "Algo salio mal al escribir en la bd"
      });
    }))
  });

  /*
  switch(request.body,result.action){
  case 'RSVPHack':
  Si la acción es reservar ejecutamos lo que ya tenemos
  break;

  case 'ShowRSVP':
  Si la acción es mostrar las reservas hacemos lo siguiente
  break;

  default:
  No action matched in webhook
  }
  */
  //Para evaluar los actions
    exports.evaluateActions = functions.https.onRequest((request, response)=>{
      switch (request.body.result.action) {

        case 'RSVPHack':
        let params = request.body.result.parameters;
        firestore.collection('tickets').add(params)
        .then(() => {
          response.send({
            speech:
            `${params.name} tu registro para un equipo de ${params.hacker} con ${params.number} personas, que ${params.time} han ido a un hack se ha realizado con exito,
            te enviare tus boletos al correo ${params.email} de inmediato.
            `
          });
        })
        .catch((e => {
          console.log("error: ", e);
          response.send({
            speech: "Algo salio mal al escribir en la bd"
          });
        }))
        break;
        case 'ShowRSVP':
        firestore.collection('tickets').get()
                .then((querySnapshot) => {
                    var tickets = [];
                    querySnapshot.forEach((doc) => { tickets.push(doc.data()) });
                    // now orders have something like this [ {...}, {...}, {...} ]
                    // converting array to speech
                    var speech = `tu tienes ${tickets.length} tickets \n`;
                    tickets.forEach((eachTicket, index) => {
                        speech += `El numero de ticket es ${index + 1} para un equipo de ${eachTicket.hacker} con
                         ${eachTicket.number} personas, reservados por ${eachTicket.name} el email de contacto es ${eachTicket.email} \n`
                    })
                    response.send({
                        speech: speech
                    });
                })
                .catch((err) => {
                    console.log('Error getting documents', err);
                    response.send({
                        speech: "Algo salio mal al leer de la base de datos"
                    })
                })
        break;
        default:
        response.send({
          speech: "No hay un action coincidente"
        })
      }
    });